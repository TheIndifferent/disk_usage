import { Style } from "./ui/style.slint";
import { SizeItem } from "./ui/size-item-struct.slint";

component ItemsList inherits FocusScope {

    in-out property <int> cursor: 0;
    in property<[SizeItem]> items;

    public function center_on_index(index: int) {
        // check if bottom line of the item fits into fli.height,
        // if yes then just scroll to the top:
        if ((index + 1) * 45pt < fli.height) {
            fli.viewport-y = 0;
            return;
        }
        // central line of the item is:
        // index * 45pt + 23pt
        // so viewport-y should be set that half of fli.height is above that line
        // (index * 45pt + 23pt) - fli.height / 2
        // but also viewport-y is negative:
        fli.viewport-y = 0 - (index * 45pt + 23pt) + fli.height / 2;
    }

    callback requested_exit;
    callback step_out;
    callback step_into(int);

    in-out property <length> viewport-width <=> fli.viewport-width;
    in-out property <length> viewport-height <=> fli.viewport-height;
    in-out property <length> viewport-x <=> fli.viewport-x;
    in-out property <length> viewport-y <=> fli.viewport-y;
    out property <length> visible-width <=> fli.width;
    out property <length> visible-height <=> fli.height;
    horizontal-stretch: 1;
    vertical-stretch: 1;

    fli := Flickable {
        x: 2px;
        y: 2px;
        interactive: false;
        // TODO: animation only works when adjusting programmatically but not from scrollbar
        animate viewport-y {
            duration: 300ms;
            easing: ease-in;
        }

        VerticalLayout {
            @children
        }
    }

    // TODO: this seems to be positioned wrongly:
    handle := Rectangle {
        background: Style.scrollbar-color;
        width: 8px;
        x: fli.width + fli.x - self.width - 2px;
        height: parent.height * fli.height / fli.viewport-height;
        property<float> viewport-y-relative: fli.viewport-y / fli.viewport-height * -1;
        y: parent.height * viewport-y-relative;
    }

    key-pressed(event) => {
        if (event.text == Key.UpArrow) {
            if (cursor > 0) {
                cursor = cursor - 1;
                if (cursor * 45pt * -1 > fli.viewport-y) {
                    // top of the item aligned with top of the visible viewport:
                    fli.viewport-y = cursor * 45pt * -1;
                }
            }
            return accept;
        }
        if (event.text == Key.DownArrow) {
            if (cursor + 1 < items.length) {
                cursor = cursor + 1;
                if (fli.height - (cursor + 1) * 45pt < fli.viewport-y) {
                    // bottom of the item aligned with bottom of the visible viewport:
                    fli.viewport-y = fli.height - (cursor + 1) * 45pt;
                }
            }
            return accept;
        }
        if (event.text == Key.LeftArrow) {
            root.step_out();
            return accept;
        }
        if (event.text == Key.RightArrow) {
            root.step_into(root.cursor);
            // TODO: should those two operations live here or be invoked from the backend?
            root.cursor = 0;
            fli.viewport-y = 0;
            return accept;
        }
        if (event.text == Key.Escape) {
            root.requested_exit();
            return accept;
        }
        return reject;
    }
}

export { ItemsList }
