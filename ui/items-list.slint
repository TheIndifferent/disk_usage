import { Style } from "./ui/style.slint";
import { SizeItem } from "./ui/size-item-struct.slint";

component ItemsList inherits FocusScope {

    in-out property <int> cursor: 0;
    in property<[SizeItem]> items;

    in-out property <length> viewport-width <=> fli.viewport-width;
    in-out property <length> viewport-height <=> fli.viewport-height;
    in-out property <length> viewport-x <=> fli.viewport-x;
    in-out property <length> viewport-y <=> fli.viewport-y;
    out property <length> visible-width <=> fli.width;
    out property <length> visible-height <=> fli.height;
    horizontal-stretch: 1;
    vertical-stretch: 1;

    fli := Flickable {
        x: 2px;
        y: 2px;
        interactive: false;
        // TODO: animation does not work for some reason
        animate viewport-y {
            delay: 500ms;
            duration: 1000ms;
            easing: ease-in;
        }

        VerticalLayout {
            @children
        }
    }
    handle := Rectangle {
        background: Style.scrollbar-color;
        width: 8px;
        x: fli.width + fli.x - self.width - 2px;
        height: parent.height * fli.height / fli.viewport-height;
        property<float> viewport-y-relative: fli.viewport-y / fli.viewport-height * -1;
        y: parent.height * viewport-y-relative;
    }

    key-pressed(event) => {
        if (event.text == Key.UpArrow) {
            if (cursor > 0) {
                cursor = cursor - 1;
            }
            return accept;
        }
        if (event.text == Key.DownArrow) {
            if (cursor + 1 < items.length) {
                cursor = cursor + 1;
            }
            return accept;
        }
        return reject;
    }
}

export { ItemsList }
